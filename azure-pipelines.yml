# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildCfgVgcFull: 'VgcFull'
  v2rayCoreVer: '4.7.0'
  v2rayCorePkgName: 'v2ray-windows-32.zip'
  v2rayCorePkgFolder: '$(Build.SourcesDirectory)/V2RayGCon/Resource/Pkg'
  v2rayCoreUrl: 'https://github.com/v2ray/v2ray-core/releases/download/v$(v2rayCoreVer)/$(v2rayCorePkgName)'

steps:
- task: NuGetToolInstaller@0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# V2RayGCon-full.zip Normal release
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildCfgVgcFull)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildCfgVgcFull)'

# V2RayGCon-lite.zip
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: 'VgcLite'

# Delete Files
# Delete files or folders. (The minimatch patterns will only match file paths, not folder paths)
- task: DeleteFiles@1
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/V2RayGCon/bin/VgcLite/'
    contents: '**/ProxySetter.*'

# V2RayGCon-lite.zip
# Archive Files
# Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/V2RayGCon/bin/VgcLite/'
    includeRootFolder: false
    archiveType: 'zip' # Options: zip, 7z, tar, wim
    #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    archiveFile: '$(Build.ArtifactStagingDirectory)/V2RayGCon-lite.zip'
    replaceExistingArchive: true 

# V2RayGCon-full.zip
# Archive Files
# Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/V2RayGCon/bin/$(buildCfgVgcFull)/'
    includeRootFolder: false
    archiveType: 'zip' # Options: zip, 7z, tar, wim
    #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    archiveFile: '$(Build.ArtifactStagingDirectory)/V2RayGCon-full.zip' 
    replaceExistingArchive: true 

# Download File
- task: PythonScript@0
  inputs:
    workingDirectory: '$(v2rayCorePkgFolder)' # Optional
    scriptSource: 'inline'
    script: from urllib.request import urlretrieve; urlretrieve('$(v2rayCoreUrl)', '$(v2rayCoreFileName)')

# Extract Files
# Extract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip.
- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(v2rayCorePkgFolder)/$(v2rayCoreFileName)'
    destinationFolder: '$(Build.SourcesDirectory)/V2RayGCon/bin/$(buildCfgVgcFull)/core'
    cleanDestinationFolder: true

# Extract Files
# Extract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip.
- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(Build.SourcesDirectory)/V2RayGCon/Resource/Pkg/vgctpl.zip'
    destinationFolder: '$(Build.SourcesDirectory)/V2RayGCon/bin/$(buildCfgVgcFull)/VGCTpl'
    cleanDestinationFolder: true

# Archive Files
# Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/V2RayGCon/bin/$(buildCfgVgcFull)/'
    includeRootFolder: false
    archiveType: 'zip' # Options: zip, 7z, tar, wim
    #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
    archiveFile: '$(Build.ArtifactStagingDirectory)/V2RayGCon-box.zip' 
    replaceExistingArchive: true 

- script: 'for %%a in (*.zip) do certutil -hashfile %%a MD5 >> md5.txt & echo. >> md5.txt'
  workingDirectory: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Calc md5 for releases.' 
  # failOnStderr: #
  # env:  # mapping of environment variables to add

- task: PublishBuildArtifacts@1
